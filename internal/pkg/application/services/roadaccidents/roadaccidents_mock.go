// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package roadaccidents

import (
	"context"
	"sync"
)

// Ensure, that RoadAccidentSvcMock does implement RoadAccidentSvc.
// If this is not the case, regenerate this file with moq.
var _ RoadAccidentSvc = &RoadAccidentSvcMock{}

// RoadAccidentSvcMock is a mock implementation of RoadAccidentSvc.
//
// 	func TestSomethingThatUsesRoadAccidentSvc(t *testing.T) {
//
// 		// make and configure a mocked RoadAccidentSvc
// 		mockedRoadAccidentSvc := &RoadAccidentSvcMock{
// 			StartFunc: func(ctx context.Context) error {
// 				panic("mock out the Start method")
// 			},
// 			getAndPublishRoadAccidentsFunc: func(ctx context.Context, lastChangeID string) (string, error) {
// 				panic("mock out the getAndPublishRoadAccidents method")
// 			},
// 			getRoadAccidentsFromTFVFunc: func(ctx context.Context, lastChangeID string) ([]byte, error) {
// 				panic("mock out the getRoadAccidentsFromTFV method")
// 			},
// 			publishRoadAccidentsToContextBrokerFunc: func(ctx context.Context, dev tfvDeviation) error {
// 				panic("mock out the publishRoadAccidentsToContextBroker method")
// 			},
// 			updateRoadAccidentStatusFunc: func(ctx context.Context, dev tfvDeviation) error {
// 				panic("mock out the updateRoadAccidentStatus method")
// 			},
// 		}
//
// 		// use mockedRoadAccidentSvc in code that requires RoadAccidentSvc
// 		// and then make assertions.
//
// 	}
type RoadAccidentSvcMock struct {
	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context) error

	// getAndPublishRoadAccidentsFunc mocks the getAndPublishRoadAccidents method.
	getAndPublishRoadAccidentsFunc func(ctx context.Context, lastChangeID string) (string, error)

	// getRoadAccidentsFromTFVFunc mocks the getRoadAccidentsFromTFV method.
	getRoadAccidentsFromTFVFunc func(ctx context.Context, lastChangeID string) ([]byte, error)

	// publishRoadAccidentsToContextBrokerFunc mocks the publishRoadAccidentsToContextBroker method.
	publishRoadAccidentsToContextBrokerFunc func(ctx context.Context, dev tfvDeviation) error

	// updateRoadAccidentStatusFunc mocks the updateRoadAccidentStatus method.
	updateRoadAccidentStatusFunc func(ctx context.Context, dev tfvDeviation) error

	// calls tracks calls to the methods.
	calls struct {
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// getAndPublishRoadAccidents holds details about calls to the getAndPublishRoadAccidents method.
		getAndPublishRoadAccidents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// LastChangeID is the lastChangeID argument value.
			LastChangeID string
		}
		// getRoadAccidentsFromTFV holds details about calls to the getRoadAccidentsFromTFV method.
		getRoadAccidentsFromTFV []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// LastChangeID is the lastChangeID argument value.
			LastChangeID string
		}
		// publishRoadAccidentsToContextBroker holds details about calls to the publishRoadAccidentsToContextBroker method.
		publishRoadAccidentsToContextBroker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Dev is the dev argument value.
			Dev tfvDeviation
		}
		// updateRoadAccidentStatus holds details about calls to the updateRoadAccidentStatus method.
		updateRoadAccidentStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Dev is the dev argument value.
			Dev tfvDeviation
		}
	}
	lockStart                               sync.RWMutex
	lockgetAndPublishRoadAccidents          sync.RWMutex
	lockgetRoadAccidentsFromTFV             sync.RWMutex
	lockpublishRoadAccidentsToContextBroker sync.RWMutex
	lockupdateRoadAccidentStatus            sync.RWMutex
}

// Start calls StartFunc.
func (mock *RoadAccidentSvcMock) Start(ctx context.Context) error {
	if mock.StartFunc == nil {
		panic("RoadAccidentSvcMock.StartFunc: method is nil but RoadAccidentSvc.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedRoadAccidentSvc.StartCalls())
func (mock *RoadAccidentSvcMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// getAndPublishRoadAccidents calls getAndPublishRoadAccidentsFunc.
func (mock *RoadAccidentSvcMock) getAndPublishRoadAccidents(ctx context.Context, lastChangeID string) (string, error) {
	if mock.getAndPublishRoadAccidentsFunc == nil {
		panic("RoadAccidentSvcMock.getAndPublishRoadAccidentsFunc: method is nil but RoadAccidentSvc.getAndPublishRoadAccidents was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		LastChangeID string
	}{
		Ctx:          ctx,
		LastChangeID: lastChangeID,
	}
	mock.lockgetAndPublishRoadAccidents.Lock()
	mock.calls.getAndPublishRoadAccidents = append(mock.calls.getAndPublishRoadAccidents, callInfo)
	mock.lockgetAndPublishRoadAccidents.Unlock()
	return mock.getAndPublishRoadAccidentsFunc(ctx, lastChangeID)
}

// getAndPublishRoadAccidentsCalls gets all the calls that were made to getAndPublishRoadAccidents.
// Check the length with:
//     len(mockedRoadAccidentSvc.getAndPublishRoadAccidentsCalls())
func (mock *RoadAccidentSvcMock) getAndPublishRoadAccidentsCalls() []struct {
	Ctx          context.Context
	LastChangeID string
} {
	var calls []struct {
		Ctx          context.Context
		LastChangeID string
	}
	mock.lockgetAndPublishRoadAccidents.RLock()
	calls = mock.calls.getAndPublishRoadAccidents
	mock.lockgetAndPublishRoadAccidents.RUnlock()
	return calls
}

// getRoadAccidentsFromTFV calls getRoadAccidentsFromTFVFunc.
func (mock *RoadAccidentSvcMock) getRoadAccidentsFromTFV(ctx context.Context, lastChangeID string) ([]byte, error) {
	if mock.getRoadAccidentsFromTFVFunc == nil {
		panic("RoadAccidentSvcMock.getRoadAccidentsFromTFVFunc: method is nil but RoadAccidentSvc.getRoadAccidentsFromTFV was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		LastChangeID string
	}{
		Ctx:          ctx,
		LastChangeID: lastChangeID,
	}
	mock.lockgetRoadAccidentsFromTFV.Lock()
	mock.calls.getRoadAccidentsFromTFV = append(mock.calls.getRoadAccidentsFromTFV, callInfo)
	mock.lockgetRoadAccidentsFromTFV.Unlock()
	return mock.getRoadAccidentsFromTFVFunc(ctx, lastChangeID)
}

// getRoadAccidentsFromTFVCalls gets all the calls that were made to getRoadAccidentsFromTFV.
// Check the length with:
//     len(mockedRoadAccidentSvc.getRoadAccidentsFromTFVCalls())
func (mock *RoadAccidentSvcMock) getRoadAccidentsFromTFVCalls() []struct {
	Ctx          context.Context
	LastChangeID string
} {
	var calls []struct {
		Ctx          context.Context
		LastChangeID string
	}
	mock.lockgetRoadAccidentsFromTFV.RLock()
	calls = mock.calls.getRoadAccidentsFromTFV
	mock.lockgetRoadAccidentsFromTFV.RUnlock()
	return calls
}

// publishRoadAccidentsToContextBroker calls publishRoadAccidentsToContextBrokerFunc.
func (mock *RoadAccidentSvcMock) publishRoadAccidentsToContextBroker(ctx context.Context, dev tfvDeviation) error {
	if mock.publishRoadAccidentsToContextBrokerFunc == nil {
		panic("RoadAccidentSvcMock.publishRoadAccidentsToContextBrokerFunc: method is nil but RoadAccidentSvc.publishRoadAccidentsToContextBroker was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Dev tfvDeviation
	}{
		Ctx: ctx,
		Dev: dev,
	}
	mock.lockpublishRoadAccidentsToContextBroker.Lock()
	mock.calls.publishRoadAccidentsToContextBroker = append(mock.calls.publishRoadAccidentsToContextBroker, callInfo)
	mock.lockpublishRoadAccidentsToContextBroker.Unlock()
	return mock.publishRoadAccidentsToContextBrokerFunc(ctx, dev)
}

// publishRoadAccidentsToContextBrokerCalls gets all the calls that were made to publishRoadAccidentsToContextBroker.
// Check the length with:
//     len(mockedRoadAccidentSvc.publishRoadAccidentsToContextBrokerCalls())
func (mock *RoadAccidentSvcMock) publishRoadAccidentsToContextBrokerCalls() []struct {
	Ctx context.Context
	Dev tfvDeviation
} {
	var calls []struct {
		Ctx context.Context
		Dev tfvDeviation
	}
	mock.lockpublishRoadAccidentsToContextBroker.RLock()
	calls = mock.calls.publishRoadAccidentsToContextBroker
	mock.lockpublishRoadAccidentsToContextBroker.RUnlock()
	return calls
}

// updateRoadAccidentStatus calls updateRoadAccidentStatusFunc.
func (mock *RoadAccidentSvcMock) updateRoadAccidentStatus(ctx context.Context, dev tfvDeviation) error {
	if mock.updateRoadAccidentStatusFunc == nil {
		panic("RoadAccidentSvcMock.updateRoadAccidentStatusFunc: method is nil but RoadAccidentSvc.updateRoadAccidentStatus was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Dev tfvDeviation
	}{
		Ctx: ctx,
		Dev: dev,
	}
	mock.lockupdateRoadAccidentStatus.Lock()
	mock.calls.updateRoadAccidentStatus = append(mock.calls.updateRoadAccidentStatus, callInfo)
	mock.lockupdateRoadAccidentStatus.Unlock()
	return mock.updateRoadAccidentStatusFunc(ctx, dev)
}

// updateRoadAccidentStatusCalls gets all the calls that were made to updateRoadAccidentStatus.
// Check the length with:
//     len(mockedRoadAccidentSvc.updateRoadAccidentStatusCalls())
func (mock *RoadAccidentSvcMock) updateRoadAccidentStatusCalls() []struct {
	Ctx context.Context
	Dev tfvDeviation
} {
	var calls []struct {
		Ctx context.Context
		Dev tfvDeviation
	}
	mock.lockupdateRoadAccidentStatus.RLock()
	calls = mock.calls.updateRoadAccidentStatus
	mock.lockupdateRoadAccidentStatus.RUnlock()
	return calls
}
