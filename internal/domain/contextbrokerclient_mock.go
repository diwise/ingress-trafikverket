// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"
)

// Ensure, that ContextBrokerClientMock does implement ContextBrokerClient.
// If this is not the case, regenerate this file with moq.
var _ ContextBrokerClient = &ContextBrokerClientMock{}

// ContextBrokerClientMock is a mock implementation of ContextBrokerClient.
//
// 	func TestSomethingThatUsesContextBrokerClient(t *testing.T) {
//
// 		// make and configure a mocked ContextBrokerClient
// 		mockedContextBrokerClient := &ContextBrokerClientMock{
// 			PostFunc: func(ctx context.Context, entity interface{}) error {
// 				panic("mock out the Post method")
// 			},
// 		}
//
// 		// use mockedContextBrokerClient in code that requires ContextBrokerClient
// 		// and then make assertions.
//
// 	}
type ContextBrokerClientMock struct {
	// PostFunc mocks the Post method.
	PostFunc func(ctx context.Context, entity interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Post holds details about calls to the Post method.
		Post []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Entity is the entity argument value.
			Entity interface{}
		}
	}
	lockPost sync.RWMutex
}

// Post calls PostFunc.
func (mock *ContextBrokerClientMock) Post(ctx context.Context, entity interface{}) error {
	if mock.PostFunc == nil {
		panic("ContextBrokerClientMock.PostFunc: method is nil but ContextBrokerClient.Post was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Entity interface{}
	}{
		Ctx:    ctx,
		Entity: entity,
	}
	mock.lockPost.Lock()
	mock.calls.Post = append(mock.calls.Post, callInfo)
	mock.lockPost.Unlock()
	return mock.PostFunc(ctx, entity)
}

// PostCalls gets all the calls that were made to Post.
// Check the length with:
//     len(mockedContextBrokerClient.PostCalls())
func (mock *ContextBrokerClientMock) PostCalls() []struct {
	Ctx    context.Context
	Entity interface{}
} {
	var calls []struct {
		Ctx    context.Context
		Entity interface{}
	}
	mock.lockPost.RLock()
	calls = mock.calls.Post
	mock.lockPost.RUnlock()
	return calls
}
